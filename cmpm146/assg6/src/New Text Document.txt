Individual_Grid

Selection Strategies Used:
In our selection strategies, we remove the last two levels generated.

We use a very small elite selection in the very beginning
Here, we take the levels with the highest fitness and generate a child from there.

The next selection we use is tournament selection. Here, we choose two different levels to make parents.
We do this by comparing 24 different potential parents from the population and take the one with the best fitness
from them. After checking and making sure that these two are not the same parent, we generate a child from them and 
add the child to the population.

The next selection strategy we use is ranked selection. Again, we choose two different levels to make parents.
We choose the parents by assigning each level a rank and from there adding x amount to a list depending on the ranking.
For example, if it was a population of 100, the worst ranking parent would have be added to a list one time and the 
100th parent/the best ranking one would be added to a list 100 times. From there we would randomly choose 2 parents 
from the list and generate a child from them. From there, the child is added to the population and the whole population is 
returned with two new children added and the worst two levels removed.



Crossover used:
The crossover used is 3 point crossover and it returns one mutated child. 

First, it copies over self.genome into new_genome

After taking 3 points, the code makes sure that we don't grab 3 of the same point. After grabbing 3 points and ordering 
them, the code then loops through each x and y in self.genome. From there, depending on the x value it will either keep
the self.genome or copy over it with other.genome.

For new_genome, it will be the same from the left most value to the first point. After, it will take on the values of others
until it reaches the second point. Continuing, it then takes on the values of self until it reaches the third point. After 
reaching the third point, it will copy the rest of other until it reaches the end.

After copying it over, the code will then return a mutated child.



Mutation used:



----------------------------------------------------------------------------------------------------------------------------------

Individual_DE

How crossover works for DE:
It first takes 2 points, one between the length of self.genome and the other between 0 and the length of other.genome.

This is basically 1 point crossover, but it happens twice. The points are taken and split the genomes, with
ga returning the first half of self.genome and the second half of other.genome. The other halves are taken by gb,
with it returning the first half of other.genome and the second half of self.genome.

For example:
If these were our two genomes
Self:
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Other:
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

The function would find two points and for this example let's assume that they return pa = 5 and pb = 15.
The point in self would be here:
     |
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
The point in other would be here:
               |   
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

Each half looks like:
xxxxx - part a.1
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx - part a.2

aaaaaaaaaaaaaaa - part b.1
aaaaaaaaaaaaaaaaaaaaaaaaaaaaa - part b.2

Taking those halves, ga(part a.1 + part b.2) would look like:
xxxxxaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

and gb(part b.1 + part a.2) would look like:
aaaaaaaaaaaaaaaxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

From there, the crossover is complete and it returns the two children.


How mutate works for DE:
The mutation rate for mutate in the DE is 10%. If that 10% is taken and the len(new_genome) is > 0, 
it takes a block to change from choosing from 0 to the len(new_genome) - 1.

From there, it takes the the information of the block and what type it is. Depending on what block type, it will change
how the block can be edited.

If the block is a 4_block, it can either be moved horizontally, vertically, or changes if it's breakable or not.

If the block is a 5_qblock, it can either be moved horizontally, vertically, or change if it has a power up or not.

If the block is a 3_coin, it can either be moved horizontally or vertically.

If the block is a 7_pipe, it can either be moved horizontally or the height is changed.

If the block is a 0_hole, it can either be moved horizontally or have its width changed.

If the block is a 6_stairs, it can either be moved horizontally, have its height changed, or have the direction changed.

If the block is a 1_platform, it can either be moved horizontally, vertically, made wider, or change what the platform is made of.

If the block is a 2_enemy, nothing changes.

After that, it removes the block that's there and adds the modified one in and returns the genome.



